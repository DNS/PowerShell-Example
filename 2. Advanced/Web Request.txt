Invoke-WebRequest   	IWR
Invoke-RestMethod       IRM


# Invoke-WebRequest member variable
Invoke-WebRequest       IWR
	StatusCode
	StatusDescription
	Content
	RawContent
	Headers
	Images
	InputFields
	Links
	RawContentLength
	RelationLink

# Invoke-RestMethod
Use Invoke-RestMethod to fetch xml or json and automatically parse it into
hash table.


# Show all links in tag <a href="" />
(Invoke-WebRequest 'http://example.com/').Links.href


# Cookies
$result = Invoke-WebRequest -Uri 'http://example.com/' -SessionVariable ss
$LoginForm = $result.Forms[0]
$LoginForm.Fields["user"] = "username"
$LoginForm.Fields["password"] = "password"
$result = Invoke-WebRequest -Uri $LoginForm.Action -WebSession $ss -Method Post

# Post method
$a = Invoke-WebRequest -Uri 'http://example.com/test.cgi' -Method Post -ContentType 'application/json' -Body @{ 'param1'='value1'; 'param2'='value2'; }


Note the lack of $ on session - that command creates a variable with the given name. After that command, you have a $ss variable, which you can then pass as the -WebSession in all subsequent requests.

# Socks5 Proxy
$result = Invoke-WebRequest -Uri 'http://example.com/' -Proxy "socks5://127.0.0.1:8000"

# User Agent
Invoke-WebRequest -Uri 'http://example.com/' -UserAgent 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0'

# set HTTP Referer
Invoke-WebRequest -Uri 'http://example.com/' -Headers @{'Referer'= 'http://example.com/origin.html'}

# Get "Key only" from Invoke-RestMethod
$r = Invoke-RestMethod -Uri "https://hypestat.com/api/E9asC1KOutzPrlALHn34X/example.com"
($r.data | Get-Member -MemberType Properties).Name



