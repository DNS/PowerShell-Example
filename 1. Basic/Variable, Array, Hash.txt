# accessing "global/local/private" variable

$local:DemoVar = "hello"
$DemoVar = "hello"

$global:DemoVar = "hello"
$script:DemoVar = "world"
$private:DemoVar = "world"
function global:DemoFunc {...}



=====================

$num1 = 777
$num2 = 5.867
$str1 = 'abc'
$str2 = "xyz"

$text1 = @"
abc"def
123'456
"@

$text2 = @'
abc"def
123'456
'@

$quote1 = "ab`"cd'ef"
$quote2 = 'ab"cd''ef'


Set-Variable -Name $var1 -Value (0x5555)
Write-Output $var1

=====================

# Array Fixed Size
[Array] -> [System.Array]
$a = [Array] @(1,2,3)
$a = @(1,2,3)
$a = (1,2,3)
$a = 1,2,3

$a = @(
'a'
'b'
'c')

$a += 4,5,6

$a[0..2]
$a[2..1]
$a[3,0,3]

$a.Count
$a.Length

$a

# ArrayList Dynamic Size
[Collections.ArrayList] -> [System.Collections.ArrayList]		
$DynamicArray = [System.Collections.ArrayList] @()
$DynamicArray = [Collections.ArrayList] @()
$DynamicArray.Add(111)


# Nested Arrays
$data = @( @(1,2,3), @(4,5,6), @(7,8,9) )


# initialize with 0
$a = [int[]]::new(4)
$a = @(0) * 4


===============================

# Copy Array, method #1
$a = @(11, 22, 33)
$b = @()
$b = $b + $a
$b

# Copy Array, method #2
$a = @(11, 22, 33)
$b = $a | % { $_ }
$b

===============================

# Hash Table
$h = @{}

# Hash Table can't have same keys.
$h = @{ Number = 1; Shape = "Square"; Color = "Blue"}
$h = @{ Number = 1
Shape = "Square"
Color = "Blue"
}

$h = [ordered] @{ Number = 1; Shape = "Square"; Color = "Blue"}	# Ordered

# Access/Modify Hash Table
$h.Key = 'Value'
$h.'Key' = 'Value'
$h['Key'] = 'Value'

# Add/Remove Hash Table
Add('Key', 'Value')
Remove('Key')
$h.Clear()


# Loop Hash Table
foreach ($i in $h.Keys) { $i + ' : ' + $h.$i }
foreach ($i in $h.GetEnumerator()) { $i.Name + ' : ' + $i.Value }


# ConvertFrom-StringData to Hash Table
$string = @"
Msg1 = Type "Windows".
Msg2 = She said, "Hello, World."
Msg3 = Enter an alias (or "nickname").
"@

$c = ConvertFrom-StringData $string

------------------------------------

# delete variable
$var1 = 'hello'
Clear-Variable $var1

===============================

# Creating an array with large initial size

$arr = New-Object int[] 10
$arr = [int[]]::new(10)

$a = @(0..10)

$arr = @($null) * 10
$arr = @('a') * 10

# Creating a variable with large initial size
$arr = @('a') * 10 -join ''

===============================


# check variable already defined or not #1
# check defined or not: $w.remarks[0].description
if ($w.remarks -eq $null) {
    Write-Host "Not defined"
} else {
    if ($w.remarks[0].description -neq $null) {
        Write-Host "Defined"
    }
}



# check variable already defined or not #2 (not working on hash member)
if (Get-Variable -Name 'MyVariable' -ErrorAction SilentlyContinue) {
    Write-Host "MyVariable is defined."
} else {
    Write-Host "MyVariable is not defined."
}

# # check variable already defined or not #3 (not working on hash member)
$foo = 123
Test-Path variable:global:foo











